/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hash.table;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    // Adding a key/value to your hashtable results in the value being in the data structure
    @Test void AddTest() {
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        assertEquals(5, student.arr.length);
    }
    //Retrieving based on a key returns the value stored
    @Test void valueStore(){
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        assertEquals(null, student.Get(5));
    }
  //  Retrieving based on a key returns the value stored
    @Test void ReturnTheValue(){
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        assertEquals("Ghada", student.Get(15));
    }
    //Successfully returns null for a key that does not exist in the hashtable
    @Test void ReturnNullIf(){
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        assertEquals(null, student.Get(5));
    }
    //Successfully handle a collision within the hashtable
    @Test void HandlingCollision(){
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        // Hash Method return the index of each backet in linkedlist
        //Successfully retrieve a value from a bucket within the hashtable that has a collision
        //Successfully hash a key to an in-range value
        assertEquals(0, student.Hash(5));
        assertEquals(0, student.Hash(15));
    }
    //Contain Method
    @Test void ContainMethod(){
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        assertEquals(true, student.Contain(13));
        assertEquals(false, student.Contain(23));
    }
    //Code Challenge 31


    //Happy Path Code Challenge 31
    @Test void HappyPath(){
        HashTable<String> collectWords=new HashTable<>(1);
        String sentences="Once upon a time, there was a brave princess who...";
        assertEquals("a",collectWords.RepeatedWord(sentences) );
    }
    // When we i have uppercase
    @Test void UpperCase(){
        HashTable<String> collectWords=new HashTable<>(1);
        String sentences="It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only...";
        assertEquals("it",collectWords.RepeatedWord(sentences) );
    }
    // WHen the word ended by comma
    @Test void EndedByComma(){
        HashTable<String> collectWords=new HashTable<>(1);
        String sentences="It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York...";
        assertEquals("summer",collectWords.RepeatedWord(sentences) );
    }

}
