/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hash.table;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    // Adding a key/value to your hashtable results in the value being in the data structure
    @Test void AddTest() {
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        assertEquals(5, student.arr.length);
    }
    //Retrieving based on a key returns the value stored
    @Test void valueStore(){
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        assertEquals(null, student.Get(5));
    }
  //  Retrieving based on a key returns the value stored
    @Test void ReturnTheValue(){
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        assertEquals("Ghada", student.Get(15));
    }
    //Successfully returns null for a key that does not exist in the hashtable
    @Test void ReturnNullIf(){
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        assertEquals(null, student.Get(5));
    }
    //Successfully handle a collision within the hashtable
    @Test void HandlingCollision(){
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        // Hash Method return the index of each backet in linkedlist
        //Successfully retrieve a value from a bucket within the hashtable that has a collision
        //Successfully hash a key to an in-range value
        assertEquals(0, student.Hash(5));
        assertEquals(0, student.Hash(15));
    }
    //Contain Method
    @Test void ContainMethod(){
        HashTable<String> student=new HashTable<>(5);
        student.Add(1,"baraa");
        student.Add(13,"Mohammad");
        student.Add(20,"Husain");
        student.Add(17,"Israa");
        student.Add(15,"Ghada");
        assertEquals(true, student.Contain(13));
        assertEquals(false, student.Contain(23));
    }
}
