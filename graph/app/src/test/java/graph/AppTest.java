/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertNotNull;

class AppTest {
    //Code Challenge 30
    //Node can be successfully added to the graph
    @Test
    void added() {
        Graph graph = new Graph();
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");
        graph.addVertex("F");
        assertNotNull(graph);
    }

    //An edge can be successfully added to the graph
    @Test
    void addEdges() {
        Graph graph = new Graph();
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");
        graph.addVertex("F");
        graph.addEdge("A", "B");
        graph.addEdge("A", "D");
        graph.addEdge("B", "C");
        graph.addEdge("D", "C");
        graph.addEdge("B", "F");
        graph.addEdge("D", "F");
        assertNotNull(graph);
    }

    // A collection of all nodes can be properly retrieved from the graph
    @Test
    void collectionOfAllNodes() {
        Graph graph = new Graph();
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");
        graph.addVertex("F");
        graph.addEdge("A", "B");
        graph.addEdge("A", "D");
        graph.addEdge("B", "C");
        graph.addEdge("D", "C");
        graph.addEdge("B", "F");
        graph.addEdge("D", "F");
        assertEquals("[A, B, C, D, F]", graph.getnodes().toString());
    }

    //All appropriate neighbors can be retrieved from the graph
    @Test
    void neighbors() {
        Graph graph = new Graph();
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");
        graph.addVertex("F");
        graph.addEdge("A", "B");
        graph.addEdge("A", "D");
        graph.addEdge("B", "C");
        graph.addEdge("D", "C");
        graph.addEdge("B", "F");
        graph.addEdge("D", "F");
        assertEquals("{A=[B, D], B=[A, C, F], C=[B, D], D=[A, C, F], F=[B, D]}", graph.getAdjVertices().toString());

        //6.The proper size is returned, representing the number of nodes in the graph
        assertEquals(5, graph.size());
    }
    // 7.A graph with only one node and edge can be properly returned
    @Test
    void returnedwithonlyEdge() {
        Graph graph = new Graph();
        graph.addVertex("A");
        graph.addEdge("A", "A");
       assertEquals("{A=[A]}",graph.getAdjVertices().toString());
    }

   // An empty graph properly returns null
    @Test
    void graphIsNull() {
        Graph graph = new Graph();
        assertEquals("{}",graph.getAdjVertices().toString());
    }

    // Code Challenge 36
    //HappyPAth
    @Test void breadthFirst(){
        Graph graph = new Graph();
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");
        graph.addVertex("F");
        graph.addEdge("A", "B");
        graph.addEdge("A", "D");
        graph.addEdge("B", "C");
        graph.addEdge("D", "C");
        graph.addEdge("B", "F");
        graph.addEdge("D", "F");
        assertEquals("[A, B, D, C, F]",graph.breadthFirst("A").toString());
    }

    @Test void iftheStackEmpty(){
        Graph graph = new Graph();
//        graph.addVertex("A");
//        graph.addVertex("B");
//        graph.addVertex("C");
//        graph.addVertex("D");
//        graph.addVertex("F");
//        graph.addEdge("A", "B");
//        graph.addEdge("A", "D");
//        graph.addEdge("B", "C");
//        graph.addEdge("D", "C");
//        graph.addEdge("B", "F");
//        graph.addEdge("D", "F");
        assertEquals(null,graph.breadthFirst(null));
    }

    @Test void iftheStackHasOneValue(){
        Graph graph = new Graph();
        graph.addVertex("A");
//        graph.addVertex("B");
//        graph.addVertex("C");
//        graph.addVertex("D");
//        graph.addVertex("F");
//        graph.addEdge("A", "B");
//        graph.addEdge("A", "D");
//        graph.addEdge("B", "C");
//        graph.addEdge("D", "C");
//        graph.addEdge("B", "F");
//        graph.addEdge("D", "F");
        assertEquals(null,graph.breadthFirst("A"));
    }

    // Code Challenge 37
    @Test void codeChallenge37(){
        Graph graph = new Graph();
        graph.addVertex("Metroville");
        graph.addVertex("Pandora");
        graph.addVertex("Arendelle");
        graph.addVertex("Narnia");
        graph.addVertex("New Monstropolis");
        graph.addweight("Metroville", "Pandora",200);
        graph.addweight("Metroville", "Narnia",300);
        graph.addweight("Pandora", "Arendelle",121);
        graph.addweight("Narnia", "Arendelle",133);
        graph.addweight("Pandora", "New Monstropolis",135);
        graph.addweight("Narnia", "New Monstropolis",137);

        List newList=new ArrayList();
        newList.add("Metroville");
        newList.add("Pandora");

        List newList2=new ArrayList();
        newList2.add("Metroville");
        newList2.add("Pandora");
        newList2.add("Arendelle");

        List newList3=new ArrayList();
        newList3.add("Metroville");

       // If the trip between two cities
        assertEquals("True, $321",graph.graphbusnisstrip(graph,newList2));
        //If the trip between three connected cities
        assertEquals("True, $200",graph.graphbusnisstrip(graph,newList));
        // If the there is no trip
        assertEquals("False, $0",graph.graphbusnisstrip(graph,newList3));
    }

    //Code Challenge 38

    @Test void CodeChllenege38(){
        Graph graph = new Graph();
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");
        graph.addVertex("F");
        graph.addEdge("A", "B");
        graph.addEdge("A", "D");
        graph.addEdge("B", "C");
        graph.addEdge("D", "C");
        graph.addEdge("B", "F");
        graph.addEdge("D", "F");
        Graph graph2 = new Graph();
        graph2.addVertex("A");
        Graph graph3 = new Graph();

        assertEquals("Graph{adjVertices={}, wieghtAdjVertices={}}", graph3.toString());
//        assertEquals(null,graph3.dft("A").toString());
        //if the ghraph have one value
        assertEquals("{ A } -> NULL",graph2.dft("A").toString());
//HappyPath
        assertEquals("{ A } -> { D } -> { F } -> { B } -> { C } -> NULL",graph.dft("A").toString());
    }
}

